/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package edu.uchicago.mpcs53013.TwitterFeed;
import scala.Tuple2;
import twitter4j.Status;

import com.google.common.collect.Lists;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.function.FlatMapFunction;
import org.apache.spark.api.java.function.Function;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;
import org.apache.spark.api.java.StorageLevels;
import org.apache.spark.streaming.Duration;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.apache.spark.streaming.twitter.TwitterUtils;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Properties;
import java.util.regex.Pattern;

import org.apache.spark.Logging;
import org.apache.log4j.*;
/**
 * Counts words in UTF8 encoded, '\n' delimited text received from the network every second.
 *
 * Usage: JavaNetworkWordCount <hostname> <port>
 * <hostname> and <port> describe the TCP server that Spark Streaming would connect to receive data.
 *
 * To run this on your local machine, you need to first run a Netcat server
 * `$ nc -lk 9999`
 * and then run the example
 * `$ bin/run-example org.apache.spark.examples.streaming.JavaNetworkWordCount localhost 9999`
 */
public final class TwitterFeed {
	// Based on https://github.com/pwendell/spark-twitter-collection/blob/master/TwitterUtils.scala
	static void configureTwitterCredentials() throws IOException {
		Properties properties = new Properties();
		FileInputStream in = new FileInputStream("twitter.properties");
		properties.load(in);
		in.close();	
		Logger.getLogger("spark").warn("Configuring Twitter OAuth");
		System.setProperty("twitter4j.oauth.consumerKey", properties.getProperty("consumerKey"));
		System.setProperty("twitter4j.oauth.consumerSecret", properties.getProperty("consumerSecret"));
		System.setProperty("twitter4j.oauth.accessToken", properties.getProperty("accessToken"));
		System.setProperty("twitter4j.oauth.accessTokenSecret", properties.getProperty("accessTokenSecret"));
	}

	private static final Pattern SPACE = Pattern.compile(" ");
	public static void main(String[] args) throws IOException {
		configureTwitterCredentials();
		boolean log4jInitialized = Logger.getLogger("spark").getAllAppenders().hasMoreElements();
		if (!log4jInitialized) {
			// We first log something to initialize Spark's default logging, then we override the
			// logging level.
			Logger.getLogger("spark").info("Setting log level to [WARN] for streaming example." +
					" To override add a custom log4j.properties to the classpath.");
			Logger.getLogger("spark").setLevel(Level.WARN);
			Logger.getRootLogger().setLevel(Level.WARN);
		}		
		// Create the context with a 1 second batch size
		SparkConf sparkConf 
		= new SparkConf().setAppName("TwitterFeed");
		JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, new Duration(5000));
		// Create a JavaReceiverInputDStream on target ip:port and count the
		// words in input stream of \n delimited text (eg. generated by 'nc')
		// Note that no duplication in storage level only for running locally.
		// Replication necessary in distributed scenario for fault tolerance.
		JavaReceiverInputDStream<Status> tweets = TwitterUtils.createStream(ssc);
		JavaDStream<String> locations = tweets.map(
				new Function<Status, String>() {
					public String call(Status status) { 
						if(status.getPlace() != null){
							return status.getPlace().getCountry();
						}
						return "no country given";
					}
				}
			
		);
		
	
		locations.print();
		ssc.checkpoint("/tmp");
		ssc.start();
		ssc.awaitTermination();
	}
}
